{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/OnToggle.js"],"names":[],"mappings":"AAAA;;;ACAA;;AAEA;AACA;AACA;AACA;AACA,CAAC,CAAC,UAAU,CAAV,EAAa,MAAb,EAAqB,QAArB,EAA+B,SAA/B,EAA2C;AACzC,QAAI,aAAa,UAAjB;;AAEA;;;AAGA,QAAI,WAAW;AACX,kBAAU,YADC;AAEX,wBAAgB,mBAFL;AAGX,wBAAgB;;AAGpB;;;AANe,KAAf,CASA,IAAI,WAAW,SAAX,QAAW,CAAU,OAAV,EAAoB;AAC/B,aAAK,OAAL,GAAe,EAAE,MAAF,CAAU,EAAV,EAAc,QAAd,EAAwB,OAAxB,CAAf;AACA,aAAK,IAAL;AACH,KAHD;;AAKA;;;AAGA;AACA,aAAS,SAAT,GAAqB;;AAEjB;;;AAGA,cAAM,gBAAW;AACb,iBAAK,WAAL;AACA,cAAE,KAAK,OAAL,CAAa,QAAf,EAAyB,EAAzB,CAA4B,OAA5B,EAAqC,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAArC;AACA,cAAE,QAAF,EAAY,EAAZ,CAAe,KAAK,SAApB,EAA+B,KAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,CAA/B;AACH,SATgB;;AAWjB;;;AAGA,mBAAW,OAdM;;AAgBjB;;;AAGA,qBAAa,uBAAW;AACpB;AACA,gBAAI,QAAS,mBAAmB,IAAnB,CAAwB,UAAU,SAAlC,CAAD,GAAiD,YAAjD,GAAgE,OAA5E;AACA,iBAAK,SAAL,GAAiB,KAAjB;AACH,SAvBgB;AAwBjB;;;AAGA,oBAAY,oBAAS,KAAT,EAAgB;AACxB,kBAAM,cAAN;;AAEA;AACA,cAAE,MAAM,MAAR,EAAgB,WAAhB,CAA4B,KAAK,OAAL,CAAa,cAAzC;;AAEA;AACA,gBAAI,qBAAqB,EAAE,MAAM,MAAR,EAAgB,IAAhB,CAAqB,oBAArB,CAAzB;;AAEA;AACA,cAAE,KAAK,OAAL,CAAa,cAAf,EAA+B,GAA/B,CAAoC,QAAM,kBAAN,CAApC,EAAkE,WAAlE,CAA8E,KAAK,OAAL,CAAa,cAA3F;AACA,oBAAM,kBAAN,EAA4B,WAA5B,CAAwC,KAAK,OAAL,CAAa,cAArD;AACH,SAvCgB;;AAyCjB;;;AAGA,4BAAoB,4BAAS,KAAT,EAAgB;AAChC,gBAAK,CAAC,EAAE,MAAM,MAAR,EAAgB,OAAhB,CAA4B,KAAK,OAAL,CAAa,QAAzC,UAAsD,KAAK,OAAL,CAAa,cAAnE,EAAsF,MAA5F,EAAqG;AACjG,uBAAK,KAAK,OAAL,CAAa,cAAlB,EAAoC,WAApC,CAAgD,KAAK,OAAL,CAAa,cAA7D;AACH;AACJ;;AAGL;AACA;AApDqB,KAArB,CAqDA,EAAE,EAAF,CAAK,UAAL,IAAmB,UAAW,OAAX,EAAqB;AACpC,eAAO,KAAK,IAAL,CAAU,YAAY;AACzB,gBAAI,CAAC,EAAE,IAAF,CAAO,IAAP,EAAa,YAAY,UAAzB,CAAL,EAA2C;AACvC,kBAAE,IAAF,CAAO,IAAP,EAAa,YAAY,UAAzB,EACA,IAAI,QAAJ,CAAc,OAAd,CADA;AAEH;AACJ,SALM,CAAP;AAMH,KAPD;;AASA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAO,OAAP,GAAiB,QAAjB;AAEH,CArGA,EAqGG,MArGH,EAqGW,MArGX,EAqGoB,QArGpB","file":"OnToggle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// https://github.com/jquery-boilerplate/jquery-patterns/blob/master/patterns/jquery.basic.plugin-boilerplate.js\r\n\r\n// the semi-colon before the function invocation is a safety\r\n// net against concatenated scripts and/or other plugins\r\n// that are not closed properly.\r\n// the anonymous function protects the `$` alias from name collisions\r\n;(function( $, window, document, undefined ) {\r\n    let pluginName = 'OnToggle';\r\n\r\n    /**\r\n     * \r\n     */\r\n    let defaults = {\r\n        toggleEl: '.js-toggle',\r\n        toggleTargetEl: '.js-toggle-target',\r\n        isVisibleClass: 'is-visible'\r\n    }\r\n\r\n    /**\r\n     * PLUGIN CONSTRUCTOR \r\n     */\r\n    let OnToggle = function( options ) {\r\n        this.options = $.extend( {}, defaults, options );\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    // https://stackoverflow.com/questions/4736910/javascript-when-to-use-prototypes\r\n    OnToggle.prototype = {\r\n        \r\n        /**\r\n         * \r\n         */\r\n        init: function() {\r\n            this.checkDevice();\r\n            $(this.options.toggleEl).on('click', this.openToggle.bind(this));\r\n            $(document).on(this.eventType, this.detectOutsideClick.bind(this));\r\n        },\r\n        \r\n        /**\r\n         * \r\n         */\r\n        eventType: 'click',\r\n\r\n        /**\r\n         * \r\n         */\r\n        checkDevice: function() {\r\n            // if we detect an ios device, then use the `touchstart`event instead of the `click` event\r\n            let event = (/iPad|iPhone|iPod/.test(navigator.userAgent)) ? \"touchstart\" : \"click\";\r\n            this.eventType = event;\r\n        },\r\n        /**\r\n         * \r\n         */\r\n        openToggle: function(event) {\r\n            event.preventDefault();\r\n\r\n            // TOGGLE THIS EL'S CLASS\r\n            $(event.target).toggleClass(this.options.isVisibleClass);\r\n\r\n            // get the associated toggle target\r\n            let thisToggleTargetEl = $(event.target).attr('data-toggle-target');\r\n\r\n            // hide any toggle target that isn't the associated target\r\n            $(this.options.toggleTargetEl).not( $(`.${thisToggleTargetEl}`) ).removeClass(this.options.isVisibleClass);\r\n            $(`.${thisToggleTargetEl}`).toggleClass(this.options.isVisibleClass);\r\n        },\r\n\r\n        /**\r\n         * \r\n         */\r\n        detectOutsideClick: function(event) {\r\n            if ( !$(event.target).closest( `${this.options.toggleEl}, ${this.options.toggleTargetEl}` ).length ) {\r\n                $(`${this.options.toggleTargetEl}`).removeClass(this.options.isVisibleClass);\r\n            }\r\n        }\r\n    }\r\n\r\n    // A really lightweight plugin wrapper around the constructor,\r\n    // preventing against multiple instantiations\r\n    $.fn[pluginName] = function ( options ) {\r\n        return this.each(function () {\r\n            if (!$.data(this, \"plugin_\" + pluginName)) {\r\n                $.data(this, \"plugin_\" + pluginName,\r\n                new OnToggle( options ));\r\n            }\r\n        });\r\n    };\r\n\r\n    /*------------------------------------*\\\r\n      EXPORT OPTIONS\r\n    \\*------------------------------------*/\r\n    // if (typeof define === 'function' && define.amd) {\r\n    //     define([], function() {\r\n    //         return toggle;\r\n    //     });\r\n    // } else if (typeof exports !== \"undefined\" && exports !== null) {\r\n    //     module.exports = toggle;\r\n    // } else {\r\n    //     window.toggle = toggle;\r\n    // }\r\n\r\n    module.exports = OnToggle;\r\n\r\n})( jQuery, window , document );"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}