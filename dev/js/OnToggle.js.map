{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/OnToggle.js"],"names":[],"mappings":"AAAA;;;ACAA;;AAEA;AACA;AACA;AACA;AACA,CAAC,CAAC,UAAU,CAAV,EAAa,MAAb,EAAqB,QAArB,EAA+B,SAA/B,EAA2C;AACzC,QAAI,aAAa,UAAjB;;AAEA;;;AAGA,QAAI,WAAW;AACX,kBAAU,YADC;AAEX,wBAAgB,mBAFL;AAGX,wBAAgB;;AAGpB;;;AANe,KAAf,CASA,IAAI,WAAW,SAAX,QAAW,CAAU,OAAV,EAAoB;AAC/B,aAAK,OAAL,GAAe,EAAE,MAAF,CAAU,EAAV,EAAc,QAAd,EAAwB,OAAxB,CAAf;AACA,aAAK,IAAL;AACH,KAHD;;AAKA;;;AAGA;AACA,aAAS,SAAT,GAAqB;;AAEjB;;;AAGA,cAAM,gBAAW;AACb,iBAAK,WAAL;AACA,cAAE,KAAK,OAAL,CAAa,QAAf,EAAyB,EAAzB,CAA4B,OAA5B,EAAqC,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAArC;AACA,cAAE,QAAF,EAAY,EAAZ,CAAe,KAAK,SAApB,EAA+B,KAAK,kBAAL,CAAwB,IAAxB,CAA6B,IAA7B,CAA/B;AACH,SATgB;;AAWjB;;;AAGA,mBAAW,OAdM;;AAgBjB;;;AAGA,qBAAa,uBAAW;AACpB;AACA,gBAAI,QAAS,mBAAmB,IAAnB,CAAwB,UAAU,SAAlC,CAAD,GAAiD,YAAjD,GAAgE,OAA5E;AACA,iBAAK,KAAL,GAAa,KAAb;AACH,SAvBgB;AAwBjB;;;AAGA,oBAAY,oBAAS,KAAT,EAAgB;AACxB,kBAAM,cAAN;AACA;AACA,gBAAI,qBAAqB,EAAE,MAAM,MAAR,EAAgB,IAAhB,CAAqB,oBAArB,CAAzB;;AAEA;AACA,cAAE,KAAK,OAAL,CAAa,cAAf,EAA+B,GAA/B,CAAoC,QAAM,kBAAN,CAApC,EAAkE,WAAlE,CAA8E,KAAK,OAAL,CAAa,cAA3F;AACA,oBAAM,kBAAN,EAA4B,WAA5B,CAAwC,KAAK,OAAL,CAAa,cAArD;AACH,SAnCgB;;AAqCjB;;;AAGA,4BAAoB,4BAAS,KAAT,EAAgB;AAChC,gBAAK,CAAC,EAAE,MAAM,MAAR,EAAgB,OAAhB,CAA4B,KAAK,OAAL,CAAa,QAAzC,UAAsD,KAAK,OAAL,CAAa,cAAnE,EAAsF,MAA5F,EAAqG;AACjG,uBAAK,KAAK,OAAL,CAAa,cAAlB,EAAoC,WAApC,CAAgD,KAAK,OAAL,CAAa,cAA7D;AACH;AACJ;;AAGL;AACA;AAhDqB,KAArB,CAiDA,EAAE,EAAF,CAAK,UAAL,IAAmB,UAAW,OAAX,EAAqB;AACpC,eAAO,KAAK,IAAL,CAAU,YAAY;AACzB,gBAAI,CAAC,EAAE,IAAF,CAAO,IAAP,EAAa,YAAY,UAAzB,CAAL,EAA2C;AACvC,kBAAE,IAAF,CAAO,IAAP,EAAa,YAAY,UAAzB,EACA,IAAI,QAAJ,CAAc,OAAd,CADA;AAEH;AACJ,SALM,CAAP;AAMH,KAPD;;AASA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAO,OAAP,GAAiB,QAAjB;AAEH,CAjGA,EAiGG,MAjGH,EAiGW,MAjGX,EAiGoB,QAjGpB","file":"OnToggle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// https://github.com/jquery-boilerplate/jquery-patterns/blob/master/patterns/jquery.basic.plugin-boilerplate.js\r\n\r\n// the semi-colon before the function invocation is a safety\r\n// net against concatenated scripts and/or other plugins\r\n// that are not closed properly.\r\n// the anonymous function protects the `$` alias from name collisions\r\n;(function( $, window, document, undefined ) {\r\n    let pluginName = 'OnToggle';\r\n\r\n    /**\r\n     * \r\n     */\r\n    let defaults = {\r\n        toggleEl: '.js-toggle',\r\n        toggleTargetEl: '.js-toggle-target',\r\n        isVisibleClass: 'is-visible'\r\n    }\r\n\r\n    /**\r\n     * PLUGIN CONSTRUCTOR \r\n     */\r\n    let OnToggle = function( options ) {\r\n        this.options = $.extend( {}, defaults, options );\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    // https://stackoverflow.com/questions/4736910/javascript-when-to-use-prototypes\r\n    OnToggle.prototype = {\r\n        \r\n        /**\r\n         * \r\n         */\r\n        init: function() {\r\n            this.checkDevice();\r\n            $(this.options.toggleEl).on('click', this.openToggle.bind(this));\r\n            $(document).on(this.eventType, this.detectOutsideClick.bind(this));\r\n        },\r\n        \r\n        /**\r\n         * \r\n         */\r\n        eventType: 'click',\r\n\r\n        /**\r\n         * \r\n         */\r\n        checkDevice: function() {\r\n            // if we detect an ios device, then use the `touchstart`event instead of the `click` event\r\n            let event = (/iPad|iPhone|iPod/.test(navigator.userAgent)) ? \"touchstart\" : \"click\";\r\n            this.event = event;\r\n        },\r\n        /**\r\n         * \r\n         */\r\n        openToggle: function(event) {\r\n            event.preventDefault();\r\n            // get the associated toggle target\r\n            let thistoggleTargetEl = $(event.target).attr('data-toggle-target');\r\n\r\n            // hide any toggle target that isn't the associated target\r\n            $(this.options.toggleTargetEl).not( $(`.${thistoggleTargetEl}`) ).removeClass(this.options.isVisibleClass);\r\n            $(`.${thistoggleTargetEl}`).toggleClass(this.options.isVisibleClass);\r\n        },\r\n\r\n        /**\r\n         * \r\n         */\r\n        detectOutsideClick: function(event) {\r\n            if ( !$(event.target).closest( `${this.options.toggleEl}, ${this.options.toggleTargetEl}` ).length ) {\r\n                $(`${this.options.toggleTargetEl}`).removeClass(this.options.isVisibleClass);\r\n            }\r\n        }\r\n    }\r\n\r\n    // A really lightweight plugin wrapper around the constructor,\r\n    // preventing against multiple instantiations\r\n    $.fn[pluginName] = function ( options ) {\r\n        return this.each(function () {\r\n            if (!$.data(this, \"plugin_\" + pluginName)) {\r\n                $.data(this, \"plugin_\" + pluginName,\r\n                new OnToggle( options ));\r\n            }\r\n        });\r\n    };\r\n\r\n    /*------------------------------------*\\\r\n      EXPORT OPTIONS\r\n    \\*------------------------------------*/\r\n    // if (typeof define === 'function' && define.amd) {\r\n    //     define([], function() {\r\n    //         return toggle;\r\n    //     });\r\n    // } else if (typeof exports !== \"undefined\" && exports !== null) {\r\n    //     module.exports = toggle;\r\n    // } else {\r\n    //     window.toggle = toggle;\r\n    // }\r\n\r\n    module.exports = OnToggle;\r\n\r\n})( jQuery, window , document );"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvT25Ub2dnbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLFVBQVUsQ0FBVixFQUFhLE1BQWIsRUFBcUIsUUFBckIsRUFBK0IsU0FBL0IsRUFBMkM7QUFDekMsUUFBSSxhQUFhLFVBQWpCOztBQUVBOzs7QUFHQSxRQUFJLFdBQVc7QUFDWCxrQkFBVSxZQURDO0FBRVgsd0JBQWdCLG1CQUZMO0FBR1gsd0JBQWdCOztBQUdwQjs7O0FBTmUsS0FBZixDQVNBLElBQUksV0FBVyxTQUFYLFFBQVcsQ0FBVSxPQUFWLEVBQW9CO0FBQy9CLGFBQUssT0FBTCxHQUFlLEVBQUUsTUFBRixDQUFVLEVBQVYsRUFBYyxRQUFkLEVBQXdCLE9BQXhCLENBQWY7QUFDQSxhQUFLLElBQUw7QUFDSCxLQUhEOztBQUtBOzs7QUFHQTtBQUNBLGFBQVMsU0FBVCxHQUFxQjs7QUFFakI7OztBQUdBLGNBQU0sZ0JBQVc7QUFDYixpQkFBSyxXQUFMO0FBQ0EsY0FBRSxLQUFLLE9BQUwsQ0FBYSxRQUFmLEVBQXlCLEVBQXpCLENBQTRCLE9BQTVCLEVBQXFDLEtBQUssVUFBTCxDQUFnQixJQUFoQixDQUFxQixJQUFyQixDQUFyQztBQUNBLGNBQUUsUUFBRixFQUFZLEVBQVosQ0FBZSxLQUFLLFNBQXBCLEVBQStCLEtBQUssa0JBQUwsQ0FBd0IsSUFBeEIsQ0FBNkIsSUFBN0IsQ0FBL0I7QUFDSCxTQVRnQjs7QUFXakI7OztBQUdBLG1CQUFXLE9BZE07O0FBZ0JqQjs7O0FBR0EscUJBQWEsdUJBQVc7QUFDcEI7QUFDQSxnQkFBSSxRQUFTLG1CQUFtQixJQUFuQixDQUF3QixVQUFVLFNBQWxDLENBQUQsR0FBaUQsWUFBakQsR0FBZ0UsT0FBNUU7QUFDQSxpQkFBSyxLQUFMLEdBQWEsS0FBYjtBQUNILFNBdkJnQjtBQXdCakI7OztBQUdBLG9CQUFZLG9CQUFTLEtBQVQsRUFBZ0I7QUFDeEIsa0JBQU0sY0FBTjtBQUNBO0FBQ0EsZ0JBQUkscUJBQXFCLEVBQUUsTUFBTSxNQUFSLEVBQWdCLElBQWhCLENBQXFCLG9CQUFyQixDQUF6Qjs7QUFFQTtBQUNBLGNBQUUsS0FBSyxPQUFMLENBQWEsY0FBZixFQUErQixHQUEvQixDQUFvQyxRQUFNLGtCQUFOLENBQXBDLEVBQWtFLFdBQWxFLENBQThFLEtBQUssT0FBTCxDQUFhLGNBQTNGO0FBQ0Esb0JBQU0sa0JBQU4sRUFBNEIsV0FBNUIsQ0FBd0MsS0FBSyxPQUFMLENBQWEsY0FBckQ7QUFDSCxTQW5DZ0I7O0FBcUNqQjs7O0FBR0EsNEJBQW9CLDRCQUFTLEtBQVQsRUFBZ0I7QUFDaEMsZ0JBQUssQ0FBQyxFQUFFLE1BQU0sTUFBUixFQUFnQixPQUFoQixDQUE0QixLQUFLLE9BQUwsQ0FBYSxRQUF6QyxVQUFzRCxLQUFLLE9BQUwsQ0FBYSxjQUFuRSxFQUFzRixNQUE1RixFQUFxRztBQUNqRyx1QkFBSyxLQUFLLE9BQUwsQ0FBYSxjQUFsQixFQUFvQyxXQUFwQyxDQUFnRCxLQUFLLE9BQUwsQ0FBYSxjQUE3RDtBQUNIO0FBQ0o7O0FBR0w7QUFDQTtBQWhEcUIsS0FBckIsQ0FpREEsRUFBRSxFQUFGLENBQUssVUFBTCxJQUFtQixVQUFXLE9BQVgsRUFBcUI7QUFDcEMsZUFBTyxLQUFLLElBQUwsQ0FBVSxZQUFZO0FBQ3pCLGdCQUFJLENBQUMsRUFBRSxJQUFGLENBQU8sSUFBUCxFQUFhLFlBQVksVUFBekIsQ0FBTCxFQUEyQztBQUN2QyxrQkFBRSxJQUFGLENBQU8sSUFBUCxFQUFhLFlBQVksVUFBekIsRUFDQSxJQUFJLFFBQUosQ0FBYyxPQUFkLENBREE7QUFFSDtBQUNKLFNBTE0sQ0FBUDtBQU1ILEtBUEQ7O0FBU0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFPLE9BQVAsR0FBaUIsUUFBakI7QUFFSCxDQWpHQSxFQWlHRyxNQWpHSCxFQWlHVyxNQWpHWCxFQWlHb0IsUUFqR3BCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnktYm9pbGVycGxhdGUvanF1ZXJ5LXBhdHRlcm5zL2Jsb2IvbWFzdGVyL3BhdHRlcm5zL2pxdWVyeS5iYXNpYy5wbHVnaW4tYm9pbGVycGxhdGUuanNcclxuXHJcbi8vIHRoZSBzZW1pLWNvbG9uIGJlZm9yZSB0aGUgZnVuY3Rpb24gaW52b2NhdGlvbiBpcyBhIHNhZmV0eVxyXG4vLyBuZXQgYWdhaW5zdCBjb25jYXRlbmF0ZWQgc2NyaXB0cyBhbmQvb3Igb3RoZXIgcGx1Z2luc1xyXG4vLyB0aGF0IGFyZSBub3QgY2xvc2VkIHByb3Blcmx5LlxyXG4vLyB0aGUgYW5vbnltb3VzIGZ1bmN0aW9uIHByb3RlY3RzIHRoZSBgJGAgYWxpYXMgZnJvbSBuYW1lIGNvbGxpc2lvbnNcclxuOyhmdW5jdGlvbiggJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkICkge1xyXG4gICAgbGV0IHBsdWdpbk5hbWUgPSAnT25Ub2dnbGUnO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKi9cclxuICAgIGxldCBkZWZhdWx0cyA9IHtcclxuICAgICAgICB0b2dnbGVFbDogJy5qcy10b2dnbGUnLFxyXG4gICAgICAgIHRvZ2dsZVRhcmdldEVsOiAnLmpzLXRvZ2dsZS10YXJnZXQnLFxyXG4gICAgICAgIGlzVmlzaWJsZUNsYXNzOiAnaXMtdmlzaWJsZSdcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBMVUdJTiBDT05TVFJVQ1RPUiBcclxuICAgICAqL1xyXG4gICAgbGV0IE9uVG9nZ2xlID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoIHt9LCBkZWZhdWx0cywgb3B0aW9ucyApO1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKi9cclxuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ3MzY5MTAvamF2YXNjcmlwdC13aGVuLXRvLXVzZS1wcm90b3R5cGVzXHJcbiAgICBPblRvZ2dsZS5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tEZXZpY2UoKTtcclxuICAgICAgICAgICAgJCh0aGlzLm9wdGlvbnMudG9nZ2xlRWwpLm9uKCdjbGljaycsIHRoaXMub3BlblRvZ2dsZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgJChkb2N1bWVudCkub24odGhpcy5ldmVudFR5cGUsIHRoaXMuZGV0ZWN0T3V0c2lkZUNsaWNrLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXZlbnRUeXBlOiAnY2xpY2snLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKi9cclxuICAgICAgICBjaGVja0RldmljZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vIGlmIHdlIGRldGVjdCBhbiBpb3MgZGV2aWNlLCB0aGVuIHVzZSB0aGUgYHRvdWNoc3RhcnRgZXZlbnQgaW5zdGVhZCBvZiB0aGUgYGNsaWNrYCBldmVudFxyXG4gICAgICAgICAgICBsZXQgZXZlbnQgPSAoL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpID8gXCJ0b3VjaHN0YXJ0XCIgOiBcImNsaWNrXCI7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnQgPSBldmVudDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9wZW5Ub2dnbGU6IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIC8vIGdldCB0aGUgYXNzb2NpYXRlZCB0b2dnbGUgdGFyZ2V0XHJcbiAgICAgICAgICAgIGxldCB0aGlzdG9nZ2xlVGFyZ2V0RWwgPSAkKGV2ZW50LnRhcmdldCkuYXR0cignZGF0YS10b2dnbGUtdGFyZ2V0Jyk7XHJcblxyXG4gICAgICAgICAgICAvLyBoaWRlIGFueSB0b2dnbGUgdGFyZ2V0IHRoYXQgaXNuJ3QgdGhlIGFzc29jaWF0ZWQgdGFyZ2V0XHJcbiAgICAgICAgICAgICQodGhpcy5vcHRpb25zLnRvZ2dsZVRhcmdldEVsKS5ub3QoICQoYC4ke3RoaXN0b2dnbGVUYXJnZXRFbH1gKSApLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5pc1Zpc2libGVDbGFzcyk7XHJcbiAgICAgICAgICAgICQoYC4ke3RoaXN0b2dnbGVUYXJnZXRFbH1gKS50b2dnbGVDbGFzcyh0aGlzLm9wdGlvbnMuaXNWaXNpYmxlQ2xhc3MpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRldGVjdE91dHNpZGVDbGljazogZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKCAhJChldmVudC50YXJnZXQpLmNsb3Nlc3QoIGAke3RoaXMub3B0aW9ucy50b2dnbGVFbH0sICR7dGhpcy5vcHRpb25zLnRvZ2dsZVRhcmdldEVsfWAgKS5sZW5ndGggKSB7XHJcbiAgICAgICAgICAgICAgICAkKGAke3RoaXMub3B0aW9ucy50b2dnbGVUYXJnZXRFbH1gKS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuaXNWaXNpYmxlQ2xhc3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEEgcmVhbGx5IGxpZ2h0d2VpZ2h0IHBsdWdpbiB3cmFwcGVyIGFyb3VuZCB0aGUgY29uc3RydWN0b3IsXHJcbiAgICAvLyBwcmV2ZW50aW5nIGFnYWluc3QgbXVsdGlwbGUgaW5zdGFudGlhdGlvbnNcclxuICAgICQuZm5bcGx1Z2luTmFtZV0gPSBmdW5jdGlvbiAoIG9wdGlvbnMgKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghJC5kYXRhKHRoaXMsIFwicGx1Z2luX1wiICsgcGx1Z2luTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICQuZGF0YSh0aGlzLCBcInBsdWdpbl9cIiArIHBsdWdpbk5hbWUsXHJcbiAgICAgICAgICAgICAgICBuZXcgT25Ub2dnbGUoIG9wdGlvbnMgKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qXFxcclxuICAgICAgRVhQT1JUIE9QVElPTlNcclxuICAgIFxcKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXHJcbiAgICAvLyBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcbiAgICAvLyAgICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIHRvZ2dsZTtcclxuICAgIC8vICAgICB9KTtcclxuICAgIC8vIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIgJiYgZXhwb3J0cyAhPT0gbnVsbCkge1xyXG4gICAgLy8gICAgIG1vZHVsZS5leHBvcnRzID0gdG9nZ2xlO1xyXG4gICAgLy8gfSBlbHNlIHtcclxuICAgIC8vICAgICB3aW5kb3cudG9nZ2xlID0gdG9nZ2xlO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIG1vZHVsZS5leHBvcnRzID0gT25Ub2dnbGU7XHJcblxyXG59KSggalF1ZXJ5LCB3aW5kb3cgLCBkb2N1bWVudCApOyJdfQ=="}